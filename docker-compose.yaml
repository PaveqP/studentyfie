version: "3.8"

services:
  university-db:
    image: postgres:16-alpine
    container_name: university-db
    environment:
      - POSTGRES_DB=university
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=12345
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d university"]
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - app-network

  user-db:
    image: postgres:16-alpine
    container_name: user-db
    environment:
      - POSTGRES_DB=user
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=12345
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d user"]
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "user-to-university:3:1,university-to-user:3:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - app-network

  user-service:
    build: ./user-service
    image: user-service
    container_name: user-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user
      - SPRING_DATASOURCE_USERNAME=dbuser
      - SPRING_DATASOURCE_PASSWORD=12345
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=60000
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_SQL_INIT_MODE=never
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - SPRING_KAFKA_CONSUMER_GROUP_ID=user-service-group
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.springframework.kafka.support.serializer.JsonDeserializer
    depends_on:
      user-db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: ["sh", "-c", "sleep 25 && java -jar /app.jar"]

  university-service:
    build: ./university-service
    image: university-service
    container_name: university-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://university-db:5432/university
      - SPRING_DATASOURCE_USERNAME=dbuser
      - SPRING_DATASOURCE_PASSWORD=12345
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=60000
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_SQL_INIT_MODE=never
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - SPRING_KAFKA_CONSUMER_GROUP_ID=university-service-group
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.springframework.kafka.support.serializer.JsonDeserializer
    depends_on:
      university-db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: ["sh", "-c", "sleep 25 && java -jar /app.jar"]

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      user-service:
        condition: service_healthy
      university-service:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
